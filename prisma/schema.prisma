// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  hashedPassword String?    @map("hashed_password")
  emailVerified  DateTime?  @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  materials      Material[] // One-to-many relation to Material
  comments       Comment[] // One-to-many relation to Comment

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Material {
  id         String    @id @default(cuid())
  name       String
  type       String
  size       String?
  uploadDate DateTime  @default(now())
  uploaderId String // Reference to User
  uploader   User      @relation(fields: [uploaderId], references: [email])
  fileUrl    String    @map("file_url")
  category   String
  comments   Comment[] // One-to-many relation to Comment
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  commentDate DateTime @default(now())
  materialId  String // Reference to Material
  material    Material @relation(fields: [materialId], references: [id])
  userId      String // Reference to User
  user        User     @relation(fields: [userId], references: [email])
}
